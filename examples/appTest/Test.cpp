
#include <iomanip>
#include <iostream>
#include <thread>

#include "../common/Circuit.h"
#include "../common/CollisionSolver.h"
#include "../common/Morpho.h"

void somasColliding(std::string& path,
                    std::string& pop,
                    bbp::sonata::Selection::Values& ids,
                    phyanim::AxisAlignedBoundingBox& limits);

void test(std::string& path,
          std::string& pop,
          bbp::sonata::Selection::Values& ids,
          phyanim::AxisAlignedBoundingBox& limits);

int main(int argc, char* argv[])
{
    std::string nsetmPath =
        "/gpfs/bbp.cscs.ch/project/proj3/juanjo/circuits/circuitNSETM.json";
    std::string nsetmPop = "S1nonbarrel_neurons";
    //
    bbp::sonata::Selection::Values nsetmIds{
        327,     1345,    2271,    3649,    4424,    4728,    4904,    5676,
        8347,    12231,   17939,   20783,   28110,   32460,   36549,   40393,
        40852,   41408,   44456,   48881,   59508,   69733,   74060,   75860,
        80459,   81603,   82179,   87974,   89939,   96818,   100407,  105892,
        106845,  111453,  118677,  121952,  123330,  125805,  129076,  134480,
        137762,  143178,  144661,  144948,  159011,  168220,  171297,  173406,
        189344,  190816,  195208,  205316,  205561,  207387,  207615,  209586,
        212325,  221468,  227236,  227906,  238815,  239323,  241458,  243714,
        251060,  260840,  263559,  266008,  268031,  271765,  276432,  283573,
        284630,  287300,  292316,  295587,  306898,  311032,  314075,  323616,
        328174,  329127,  332611,  342089,  342875,  354293,  355969,  365807,
        377703,  377888,  386895,  389697,  397494,  400568,  400643,  403805,
        403824,  404700,  411494,  419340,  421409,  425540,  428027,  428722,
        432589,  440476,  440892,  450621,  450977,  460353,  461620,  461896,
        474412,  474479,  477458,  480320,  501142,  511057,  511431,  512285,
        512758,  515820,  516896,  517078,  517871,  518772,  521846,  527702,
        535325,  537833,  538515,  540026,  540513,  542327,  544534,  547162,
        548049,  551338,  564747,  565063,  567177,  569524,  573149,  584227,
        587515,  597534,  599836,  602878,  604331,  607364,  610204,  610534,
        610804,  610938,  611685,  615969,  621737,  622179,  631395,  645246,
        645617,  647449,  650626,  651578,  651940,  652294,  653722,  655148,
        655613,  655703,  658952,  660451,  661770,  666010,  668467,  669146,
        670627,  670770,  671585,  674521,  675082,  676352,  676751,  676853,
        682307,  682905,  685970,  687451,  690712,  691907,  1124710, 1127970,
        1159646, 1316213, 1338796, 1388643, 1522266, 1754035, 2080789, 2213908,
        2215450, 2219389, 2226275, 2233046, 2245311, 2260529, 2263578, 2267324,
        2273926, 2274996, 2280105, 2293715, 2308291, 2319118, 2323007, 2333383,
        2336303, 2344961, 2351959, 2354257, 2356668, 2361683, 2370717, 2373713,
        2378008, 2386510, 2395432, 2398133, 2400733, 2417207, 2433778, 2435611,
        2443378, 2448509, 2456751, 2470881, 2473748, 2478789, 2480192, 2485154,
        2486119, 2488612, 2491552, 2509851, 2521552, 2527185, 2534174, 2538802,
        2545799, 2564689, 2577812, 2586348, 2599648, 2617869, 2621655, 2651526,
        2669653, 2671163, 2676476, 2680164, 2688932, 2689848, 2698726, 2701247,
        2705883, 2706612, 2707832, 2716449, 2724279, 2737522, 2737943, 2752464,
        2777180, 2777314, 2782479, 2788807, 2868517, 2870531, 2870962, 2894526,
        2895003, 2897643, 2898473, 2903222, 2903861, 2906703, 2912632, 2913728,
        2914788, 2915152, 2917298, 2918913, 2920651, 2920975, 2921086, 2921396,
        2925610, 2927795, 2928944, 2938052, 2942657, 2944264, 2945689, 2950094,
        2956311, 2957625, 2958227, 2958281, 2959957, 2960960, 2962072, 2962763,
        2966481, 2967049, 2967079, 2967728, 2968512, 2968515, 2970232, 2970396,
        2971092, 2972698, 2974127, 2975709, 2975835, 2975938, 2977622, 2978890,
        2979529, 2983067, 2984075, 2984977, 2986746, 2988414, 2992924, 2993290,
        2994288, 2995501, 2996379, 2996881, 2997031, 2998342, 3000195, 3001518,
        3003021, 3003224, 3003824, 3005109, 3006739, 3008357, 3010409, 3012971,
        3013247, 3014189, 3014938, 3015169, 3016189, 3017147, 3017482, 3018097,
        3019241, 3019891, 3020335, 3020917, 3026745, 3027499, 3027522, 3028577,
        3028639, 3029056, 3029386, 3029498, 3029843, 3030041, 3030272, 3032714,
        3034307, 3036645, 3038635, 3039601, 3041151, 3041197, 3041884, 3042502,
        3043682, 3045010, 3045097, 3045397, 3047325, 3049680, 3050780, 3052070,
        3058969, 3059276, 3060538, 3060754, 3061080, 3065049, 3065659, 3065924,
        3067239, 3071869, 3073482, 3074326, 3074643, 3076199, 3077224, 3077757,
        3078001, 3079052, 3082231, 3083063, 3086019, 3088979, 3090125, 3090218,
        3090484, 3092098, 3093270, 3094137, 3097565, 3097901, 3100086, 3101220,
        3101454, 3101743, 3102493, 3103115, 3106169, 3106886, 3107951, 3109696,
        3109873, 3111788, 3114139, 3114344, 3114482, 3115134, 3115160, 3117369,
        3119453, 3120461, 3121769, 3122458, 3122787, 3123331, 3126120, 3128557,
        3129078, 3132870, 3133363, 3133718, 3134066, 3135457, 3139440, 3139792,
        3141890, 3142524, 3144395, 3148289, 3153071, 3153276, 3155149, 3157105,
        3157715, 3157921, 3158927, 3160188, 3161661, 3162537, 3163881, 3165280,
        3168399, 3168742, 3169356, 3169754, 3170698, 3170990, 3171828, 3174677,
        3174981, 3175360, 3178665, 3179353, 3179923, 3180218, 3181319, 3181653,
        3185845, 3186038, 3188227, 3188520, 3188920, 3189051, 3190835, 3191550,
        3194400, 3194456, 3199424, 3200586, 3202215, 3204475, 3205980, 3206899,
        3208233, 3209082, 3212780, 3213046, 3216061, 3217579, 3221198, 3222030,
        3222592, 3227375, 3227985, 3229550, 3229839, 3234396, 3235764, 3236642,
        3239740, 3242926, 3245246, 3247368, 3250991, 3253489, 3253682, 3253922,
        3257457, 3262193, 3264428, 3264829, 3269454, 3269602, 3270896, 3271659,
        3276422, 3276802, 3278008, 3278541, 3279672, 3279827, 3281144, 3281570,
        3281817, 3283481, 3284072, 3287418, 3287875, 3289226, 3289952, 3290133,
        3293308, 3294005, 3294797, 3297912, 3299306, 3301425, 3304688, 3305015,
        3305087, 3306283, 3306743, 3309779, 3310348, 3310419, 3311371, 3311468,
        3312613, 3317246, 3318993, 3320250, 3320728, 3321148, 3321737, 3321883,
        3323898, 3327045, 3327161, 3330248, 3333534, 3334199, 3335639, 3335754,
        3336945, 3337129, 3337515, 3338313, 3344437, 3348282, 3349434, 3349591,
        3350578, 3350702, 3350824, 3351127, 3352220, 3355674, 3356703, 3356846,
        3357129, 3358470, 3364760, 3365407, 3365882, 3368247, 3368331, 3368962,
        3372281, 3372624, 3372729, 3373130, 3373689, 3376622, 3382020, 3382383,
        3382816, 3383052, 3383176, 3383410, 3384430, 3385353, 3385742, 3386006,
        3386394, 3386525, 3387965, 3389107, 3389756, 3390340, 3392081, 3392695,
        3394823, 3395398, 3396155, 3398320, 3401933, 3402966, 3404567, 3404620,
        3407041, 3408052, 3410566, 3411076, 3412003, 3416511, 3419388, 3423077,
        3425304, 3426598, 3430493, 3438818, 3453725, 3456794, 3465143, 3480716,
        3499677, 3507529, 3523495, 3589000, 3589580, 3610607, 3611200, 3612122,
        3613817, 3623756, 3627913, 3628308, 3631894, 3632467, 3633451, 3633986,
        3640219, 3641190, 3642912, 3646332, 3647038, 3648262, 3648809, 3649364,
        3650769, 3654424, 3655888, 3655932, 3658030, 3665264, 3666886, 3667887,
        3674153, 3680090, 3680377, 3681585, 3681727, 3686421, 3686864, 3687552,
        3688161, 3691230, 3691572, 3691810, 3693034, 3696052, 3696251, 3696752,
        3702983, 3706504, 3710428, 3711336, 3712433, 3715215, 3715315, 3716782,
        3719445, 3725329, 3726775, 3729461, 3730148, 3731080, 3731654, 3736954,
        3741643, 3748896, 3752861, 3755844, 3763568, 3765348, 3765412, 3767686,
        3770969, 3773307, 3774982, 3775422, 3776731, 3781207, 3786394, 3786431,
        3797464, 3803379, 3804703, 3806746, 3809867, 3811947, 3813254, 3815741,
        3817358, 3822626, 3826632, 3832774, 3832874, 3834857, 3835097, 3835605,
        3837040, 3838572, 3839940, 3849744, 3857400, 3859888, 3860541, 3866094,
        3866493, 3868199, 3869468, 3869501, 3871255, 3872235, 3874758, 3874822,
        3875155, 3877222, 3878586, 3879460, 3882797, 3883348, 3883531, 3885879,
        3888164, 3888392, 3893171, 3901160, 3906930, 3907427, 3909359, 3913441,
        3920851, 3922773, 3923279, 3926886, 3928438, 3936743, 3940817, 3942580,
        3946976, 3949237, 3951293, 3956655, 3957577, 3959272, 3964010, 3967985,
        3973184, 3975374, 3975884, 3978795, 3980198, 3982301, 3982526, 3985441,
        3986305, 3989872, 3989892, 3990491, 3993108, 3996759, 3997733, 3998067,
        3998191, 3998267, 4000613, 4001338, 4004810, 4008915, 4009916, 4010083,
        4010137, 4011572, 4012998, 4013508, 4015703, 4019333, 4023763, 4023969,
        4026268, 4026623, 4029019, 4029350, 4029680, 4032641, 4033800, 4034899,
        4035010, 4038194, 4041155, 4041862, 4042797, 4043212, 4047729, 4049750,
        4050714, 4051103, 4057649, 4060077, 4066616, 4067848, 4068152, 4069321,
        4070332, 4073594, 4082108, 4085926, 4086124, 4088716, 4088954, 4091426,
        4091496, 4092233, 4093701, 4094252, 4105591, 4106045, 4109170, 4111050,
        4112115, 4112260, 4112655, 4117428, 4118581, 4118824, 4119681, 4119837,
        4123922, 4124283, 4124334, 4124915, 4126034, 4129199, 4132962, 4133762,
        4133781, 4138296, 4141032, 4141092, 4142773, 4143188, 4144362, 4147341,
        4151497, 4152876, 4157204, 4158882, 4159325, 4162950, 4165579, 4168147,
        4169724, 4170136, 4171963, 4175332, 4175604, 4176887, 4182715, 4187529,
        4188283, 4192685, 4199586, 4200384, 4201023, 4204106, 4208171, 4209717,
        4218355, 4224125, 4226931, 4229819};
    phyanim::AxisAlignedBoundingBox nsetmLimits;
    nsetmLimits.lowerLimit(phyanim::Vec3(3000, 1000, -900));
    nsetmLimits.upperLimit(phyanim::Vec3(3020, 1020, -880));

    std::string path =
        // "/gpfs/bbp.cscs.ch/project/proj3/juanjo/circuits/circuit2K.json";
        "/home/jjgarcia/data/circuits/circuit/circuit_sonata.json";
    std::string pop = "All";
    bbp::sonata::Selection::Values ids{
        0,    4,    6,    12,   14,   16,   19,   21,   22,   24,   26,   27,
        31,   33,   34,   36,   41,   42,   45,   46,   47,   52,   54,   66,
        67,   72,   73,   74,   75,   76,   77,   82,   94,   100,  101,  112,
        113,  125,  131,  132,  133,  136,  137,  139,  143,  144,  145,  149,
        157,  158,  159,  160,  161,  162,  163,  169,  170,  184,  204,  207,
        208,  209,  214,  220,  221,  222,  223,  224,  236,  237,  238,  239,
        240,  247,  248,  249,  254,  258,  260,  261,  262,  263,  265,  267,
        268,  269,  270,  271,  272,  278,  280,  281,  292,  295,  300,  305,
        308,  312,  313,  314,  315,  316,  323,  324,  327,  330,  333,  334,
        335,  336,  337,  338,  342,  344,  350,  351,  355,  356,  366,  367,
        371,  372,  373,  374,  375,  376,  378,  381,  394,  395,  413,  414,
        444,  445,  446,  448,  450,  453,  459,  464,  466,  470,  471,  472,
        473,  477,  479,  484,  485,  487,  503,  504,  516,  531,  532,  535,
        543,  545,  546,  548,  549,  550,  556,  559,  560,  561,  562,  563,
        564,  565,  598,  600,  605,  607,  610,  615,  641,  646,  652,  653,
        654,  655,  656,  657,  659,  664,  678,  702,  703,  704,  722,  724,
        725,  727,  728,  729,  730,  734,  739,  742,  743,  750,  751,  752,
        770,  773,  778,  787,  794,  796,  800,  823,  836,  850,  855,  867,
        868,  884,  888,  890,  898,  899,  901,  907,  908,  909,  922,  934,
        948,  949,  959,  967,  1002, 1010, 1011, 1022, 1043, 1044, 1045, 1080,
        1095, 1097, 1144, 1146, 1149, 1150, 1167, 1240, 1250, 1251, 1273, 1276,
        1279, 1329, 1340, 1451, 1539, 1570, 1585, 1592, 1667, 1977, 1978, 2102};

    phyanim::AxisAlignedBoundingBox limits;
    limits.lowerLimit(phyanim::Vec3(300, 400, 400));
    limits.upperLimit(phyanim::Vec3(400, 500, 500));

    std::cout << "################## nsetm ##################" << std::endl;
    test(nsetmPath, nsetmPop, nsetmIds, nsetmLimits);

    std::cout << "################## 2k ##################" << std::endl;
    test(path, pop, ids, limits);

    return 0;
}

void test(std::string& path,
          std::string& pop,
          bbp::sonata::Selection::Values& ids,
          phyanim::AxisAlignedBoundingBox& limits)
{
    double dt = 0.001;
    double ks = 1000.0;
    double kd = 0.1;
    double ksc = 1.0;
    uint32_t num = 1;

    ///////////////////////////////////////////
    ///////////////////////////////////////////
    auto prev = std::chrono::steady_clock::now();

    examples::Circuit circuit(path, pop);
    std::vector<examples::Morpho*> morphologies =
        circuit.getNeurons(ids, &limits);
    uint32_t size = morphologies.size();
    auto now = std::chrono::steady_clock::now();
    std::chrono::duration<double> elapsedTime = now - prev;
    std::cout << "\tLoaded " << size
              << " morphologies in: " << elapsedTime.count() << " seconds"
              << std::endl;

    phyanim::HierarchicalAABBs morphoAABBs(size);
    std::vector<phyanim::Edges> edgesSet(size);
    std::vector<phyanim::Nodes> nodesSet(size);

    uint32_t sizeEdges = 0;
    uint32_t sizeNodes = 0;
#ifdef PHYANIM_USES_OPENMP
#pragma omp parallel for
#endif
    for (uint32_t i = 0; i < size; ++i)
    {
        edgesSet[i] = morphologies[i]->edges;
        resample(edgesSet[i]);
        removeOutEdges(edgesSet[i], limits);
        nodesSet[i] = uniqueNodes(edgesSet[i]);
        morphoAABBs[i] = new phyanim::HierarchicalAABB(edgesSet[i], 1);
#ifdef PHYANIM_USES_OPENMP
#pragma omp critical
#endif
        {
            sizeEdges += edgesSet[i].size();
            sizeNodes += nodesSet[i].size();
        }
    }

    phyanim::Edges edges;
    for (uint32_t i = 0; i < size; ++i)
        edges.insert(edges.end(), edgesSet[i].begin(), edgesSet[i].end());
    phyanim::Nodes nodes = phyanim::uniqueNodes(edges);

    auto aabb = new phyanim::HierarchicalAABB(edges, 1);

    auto solver = new examples::CollisionSolver(dt);
    auto system = new phyanim::ExplicitMassSpringSystem(dt);
    system->gravity = false;

    // std::cout << "\tSimulation with " << sizeEdges << " springs and "
    //           << sizeNodes << " nodes" << std::endl;

    /////////////////////////////////////////
    /////////////////////////////////////////
    /////////////////////////////////////////
    /////////////////////////////////////////
    /////////////////////////////////////////
    /////////////////////////////////////////
    /////////////////////////////////////////
    /////////////////////////////////////////
    //     prev = std::chrono::steady_clock::now();
    //     for (uint32_t iter = 0; iter < num; ++iter)
    //         solver->solve(morphoAABBs, edgesSet, nodesSet, limits, ks, ksc,
    //         kd);
    //     now = std::chrono::steady_clock::now();
    //     elapsedTime = now - prev;
    //     std::cout << "\tSolver time: " << elapsedTime.count() / num << "
    //     seconds "
    //               << std::endl;
    //
    //     ///////////////////////////////////////////
    //     ///////////////////////////////////////////
    //     prev = std::chrono::steady_clock::now();
    //     for (uint32_t iter = 0; iter < num; ++iter)
    // #ifdef PHYANIM_USES_OPENMP
    // #pragma omp parallel for
    // #endif
    //         for (uint32_t i = 0; i < size; ++i)
    //         {
    //             system->clearCollision(edgesSet[i]);
    //             system->clearForce(nodesSet[i]);
    //             system->step(nodesSet[i], edgesSet[i], limits, ks, kd);
    //         }
    //     now = std::chrono::steady_clock::now();
    //     elapsedTime = now - prev;
    //     std::cout << "\tSimulation sets time: " << elapsedTime.count() / num
    //               << " seconds" << std::endl;
    //
    //     ///////////////////////////////////////////
    //     ///////////////////////////////////////////
    //     prev = std::chrono::steady_clock::now();
    //     for (uint32_t iter = 0; iter < num; ++iter)
    //     {
    //         system->clearCollision(nodes);
    //         system->clearForce(nodes);
    //         system->step(nodes, edges, limits, ks, kd);
    //     }
    //     now = std::chrono::steady_clock::now();
    //     elapsedTime = now - prev;
    //     std::cout << "\tSimulation unique set time: " << elapsedTime.count()
    //     / num
    //               << " seconds" << std::endl;

    /////////////////////////////////////////
    /////////////////////////////////////////
    prev = std::chrono::steady_clock::now();
    uint32_t numCollisions = 0;
    for (uint32_t iter = 0; iter < num; ++iter)
    {
        numCollisions +=
            phyanim::CollisionDetection::computeCollisions(morphoAABBs, ksc);
    }
    now = std::chrono::steady_clock::now();
    elapsedTime = now - prev;
    std::cout << "\tCompute collision: " << numCollisions / num
              << " in: " << elapsedTime.count() / num << " seconds"
              << std::endl;

    /////////////////////////////////////////
    /////////////////////////////////////////
    prev = std::chrono::steady_clock::now();
    numCollisions = 0;
    uint32_t numSelfCollisions = 0;
    for (uint32_t iter = 0; iter < num; ++iter)
    {
        numCollisions =
            phyanim::CollisionDetection::computeCollisions(morphoAABBs, ksc);
        numSelfCollisions = phyanim::CollisionDetection::computeSelfCollisions(
            morphoAABBs, ksc);
    }
    now = std::chrono::steady_clock::now();
    elapsedTime = now - prev;
    std::cout << "\tCompute self collision: " << numCollisions << "/"
              << numSelfCollisions << "/" << numCollisions + numSelfCollisions
              << " in time: " << elapsedTime.count() / num << " seconds"
              << std::endl;

    // /////////////////////////////////////////
    // /////////////////////////////////////////
    // prev = std::chrono::steady_clock::now();
    // numCollisions = 0;
    // for (uint32_t iter = 0; iter < num; ++iter)
    //     numCollisions +=
    //         phyanim::CollisionDetection::computeCollisions(aabb, ksc);
    // now = std::chrono::steady_clock::now();
    // elapsedTime = now - prev;
    // std::cout << "\tCompute collision aabb: " << numCollisions
    //           << " in time: " << elapsedTime.count() / num << " seconds"
    //           << std::endl;

    ///////////////////////////////////////////
    ///////////////////////////////////////////
    prev = std::chrono::steady_clock::now();
    for (uint32_t iter = 0; iter < num; ++iter)
#ifdef PHYANIM_USES_OPENMP
#pragma omp parallel for
#endif
        for (uint32_t i = 0; i < size; ++i)
        {
            morphoAABBs[i]->update();
        }
    now = std::chrono::steady_clock::now();
    elapsedTime = now - prev;
    std::cout << "\tBounding Box uptade : " << elapsedTime.count() / num
              << " seconds" << std::endl;

    ///////////////////////////////////////////
    ///////////////////////////////////////////
    prev = std::chrono::steady_clock::now();
    for (uint32_t iter = 0; iter < num; ++iter) aabb->update();
    now = std::chrono::steady_clock::now();
    elapsedTime = now - prev;
    std::cout << "\tBounding Box aabb uptade : " << elapsedTime.count() / num
              << " seconds" << std::endl;
}

void somasColliding(std::string& path,
                    std::string& pop,
                    bbp::sonata::Selection::Values& ids,
                    phyanim::AxisAlignedBoundingBox& limits)
{
}
